
import java.math.BigInteger;
import java.security.SecureRandom;

public class PrimeGenerator {

	private final static BigInteger one = new BigInteger("1");
	private final static SecureRandom random = new SecureRandom();
	
	private BigInteger privateKey,publicKey,modulus;
	
	public PrimeGenerator(int N){
		BigInteger p = BigInteger.probablePrime(N/2, random);
		BigInteger q = BigInteger.probablePrime(N, random);
		BigInteger phi = (p.subtract(one).multiply(q.subtract(one)));
		
		modulus = p.multiply(q);
		publicKey = new BigInteger("65537");
		privateKey = publicKey.modInverse(phi);
	}
	
	public BigInteger encrypt(BigInteger message) {
		return message.modPow(publicKey, modulus);
	}
	
	public BigInteger decrypt(BigInteger encrypted) {
		return encrypted.modPow(privateKey, modulus);
	}
	
	public String toString() {
		String s = "";
		s += "public = " + publicKey + "\n";
		s += "private = " + privateKey + "\n";
		s += "modulus = " + modulus;
		return s;
	}
	
	//works for numbers up to 100
	public void PrimesUpTo(Integer input) {
		
		if(input == 2 || input == 3) {
			System.out.println("2");
			System.out.println("3");
		}
		
		for(int i = 0; i<Math.sqrt(input); i++) {
			
		}
		
	}
	
	public static void main(String args[]) {
		int N = Integer.parseInt(args[0]);
		PrimeGenerator key = new PrimeGenerator(N);
		System.out.println(key);
		
		String s = "gay looking boy";
		byte[] bytes = s.getBytes();
		BigInteger message = new BigInteger(bytes);
		
		BigInteger encrypt = key.encrypt(message);
		BigInteger decrypt = key.decrypt(encrypt);
		System.out.println("message   = " + message);
		System.out.println("encrypted = " + encrypt);
		System.out.println("decrypted = " + decrypt);
	}

}
